#!/bin/bash

# Detect the shell
CURRENT_SHELL=$(ps -p $$ -ocomm=)

# Environment Variables (shared)
export NODE_OPTIONS="--max-old-space-size=1638994"
export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"

# Paths (avoid redundant appends)
for p in "$HOME/.volta/bin" "/opt/homebrew/bin" "/export/content/linkedin/bin" "$HOME/.cargo/bin"; do
  [[ ":$PATH:" != *":$p:"* ]] && PATH="$p:$PATH"
done
export PATH

# Load Scripts (shared)
[ -f "$HOME/dotfiles/scripts/z.sh" ] && . "$HOME/dotfiles/scripts/z.sh"
[ -f "$HOME/dotfiles/rdev_bash_helpers" ] && . "$HOME/dotfiles/rdev_bash_helpers"

# NVM (shared)
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

if [[ -n "$ZSH_NAME" ]]; then
  if [[ -f "$HOME/dotfiles/zsh_setup" ]]; then
    source "$HOME/dotfiles/zsh_setup"
  fi
fi

if [[ "$CURRENT_SHELL" == "bash" ]]; then
  Switch to Zsh if available and correct path
  if [[ -x "$(command -v zsh)" ]]; then
    export SHELL="$(command -v zsh)"
    [[ $- == *i* ]] && exec "$SHELL"
  fi
  # If zsh not avaiable, setup for bash:
  [ -f "$HOME/dotfiles/scripts/git-completion.bash" ] && . "$HOME/dotfiles/scripts/git-completion.bash"
  # Custom Bash prompt
  if [[ "$(uname)" == "Darwin" ]]; then
    export PS1='\[\e[1;32m\]\h\[\e[m\]\[\e[1;30m\]\w\[\e[m\]\[\e[1;35m\]$\[\e[m\]\[\e[1;32m\]\[\e[m\] '
  else
    export PS1='\[\e[1;33m\]\h@\w$\[\e[m\] '
  fi

  export LSCOLORS=GxFxCxDxBxegedabagaced
  export CLICOLOR=1

  # Load fzf if available
  [ -f ~/.fzf.bash ] && source ~/.fzf.bash
fi

# Aliases
alias evim='vim ~/dotfiles/vim/vimrc'
alias egit='vim ~/dotfiles/gitconfig'
alias rzsh='. ~/.zshrc'
alias ezsh='vim ~/.zshrc'
alias rbash='. ~/.bashrc'
alias ebash='vim ~/.bashrc'
alias ebashz='vim ~/dotfiles/bash_zsh_common'
alias erip='vim ~/.ripgreprc'
alias code='code .'
alias ..='cd ..'
alias l='ls -l'
alias ll='ls -la'
alias lll='ls -lha'

# Functions
port() {
  echo "Checking ports 9000-9005, 9999, 4443, 4200"
  for i in {9000..9005} 9999 4443 4200; do
    echo "Port $i: $(lsof -n -iTCP:$i)"
  done
}

toggleHost() {
  case "$(head -n1 /etc/hosts)" in
    *local*)  sudo cp /etc/hosts_server1 /etc/hosts ;;
    *server1*) sudo cp /etc/hosts_server2 /etc/hosts ;;
    *) sudo cp /etc/hosts_local /etc/hosts ;;
  esac
}

rg() {
  [[ -t 1 ]] && command rg -p "$@" | less -RFX || command rg "$@"
}

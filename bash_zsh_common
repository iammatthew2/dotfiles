#!/bin/bash


# include bash_private if it exists
if [ -f ~/.secrets/bash_private ]; then
   . ~/.secrets/bash_private
fi

# include rdev_helpers if it exists
if [ -f ~/dotfiles/rdev_bash_helpers ]; then
   . ~/dotfiles/rdev_bash_helpers
fi

export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc

##### methods
##get info on port 9000 or some other specified port
port() {
  echo "Running lsof -n -iTCP: on ports 9000 thru 9005 and 9999, 4443, 4200"
  for i in {9000..9005} 
    do
      echo "Port $i: $(lsof -n -iTCP:$i)"
    # alternative command - might be more redhat friendly: lsof -n -iTCP:$i
    done
    echo "Port 9999: $(lsof -n -iTCP:9999)"
    echo "Port 4443: $(lsof -n -iTCP:4443)"
    echo "Port 4200: $(lsof -n -iTCP:4200)"
}

##toggle the host file from local, server1, server2 
toggleHost() {
  echo "Get server IP with: getServerIp"
  read -r line < /etc/hosts
  if [[ $line = *"local"* ]]; then
    echo "Toggling the host file from local to server1"
    sudo cp /etc/hosts_server1 /etc/hosts
  elif [[ $line = *"server1"* ]]; then
    echo "Toggling the host file from server1 to server2"
    sudo cp /etc/hosts_server2 /etc/hosts
  else
    echo "Toggling the host file from server2 to local"
    sudo cp /etc/hosts_local /etc/hosts
  fi
}

rg() {
    if [ -t 1 ]; then
        command rg -p "$@" | less -RFX
    else
        command rg "$@"
    fi
}

#######################################
# Run ember exam against a set of files
# Flags:
# -c: (default) run test files from git unstaged changes, i.e., test files you seen in 'git status'
# -d: run test files in from git head
# -h: help
# files[,files]: run supplied test files
#######################################
emberTests() {
  gitHead_flag=''
  gitChanges_flag=''
  help_flag=''
  listOfTestFiles=''
  finalTestFiles=''

  # handle a set of command flags
  unset opt OPTARG OPTIND
  while getopts 'cdh' flag; do
    case "${flag}" in
      c ) gitChanges_flag='true' ;;
      d ) gitHead_flag='true' ;;
      h ) help_flag='true' ;;
    esac
  done

  # determine which (if any) test files we're going to run
  if [[ -z "$1" ]]; then
    # default to '-c' param
    emberTests -c
  elif [[ "$gitChanges_flag" == "true" ]]; then
    echo "Testing files in git status:"
    listOfTestFiles=$(git status --porcelain | sed s/^...// | grep test)
    echo "$listOfTestFiles"
    finalTestFiles=$(echo "$listOfTestFiles" | tr '\n' ',' | sed 's/.$//')
  elif [[ "$gitHead_flag" == "true" ]]; then
    echo "Testing files in git HEAD:"
    listOfTestFiles=$(git diff HEAD^ HEAD --name-only -- '*test*')
    echo "$listOfTestFiles"
    finalTestFiles=$(echo "$listOfTestFiles" | tr '\n' ',' | sed 's/.$//' | xargs echo)
  elif [[ "$help_flag" == "true" ]]; then
    echo "emberTests is a helper for plugging a set of test files into 'ember exam --path dist --file-path'"
    echo ""
    echo "Usage:"
    echo "* emberTest: default (same as emberTest -c): run test files from git unstaged changes, i.e., test files you seen in 'git status'"
    echo "* emberTest -d: run test files from files in git head"
    echo "* emberTest \"filePath[,otherFilePath]"
  elif [[ $1 == -* ]]; then
    # looks like a param was passed that was not caught here
    echo "Unrecognized parameter. Trying running the command with the help (-h) flag"
  else
    echo "Assuming you've passed in a file/files"
    echo "Passing the following to ember exam:"
    finalTestFiles=$1
    echo $finalTestFiles
  fi

  # exit early since there are no files to test and we'll wait forever if this gets passed to ember exam
  if [[ -z "$finalTestFiles" ]]; then
    return 1
  fi

  # run the tests
  ember exam --path dist --file-path ${finalTestFiles}
}

##### aliases
alias evim='vim ~/dotfiles/vim/vimrc'
alias egit='vim ~/dotfiles/gitconfig'
alias etmux='vim ~/.tmux.conf'
alias rzsh='. ~/.zshrc'
alias ezsh='vim ~/.zshrc'
alias rbash='. ~/.bash_profile'
alias ebash='vim ~/.bash_profile'
alias ebashz='vim ~/dotfiles/bash_zsh_common'
alias erip='vim ~/.ripgreprc'
alias ewatch='vim ~/.watchman-processor.config.js'
alias code='code .'
alias ..='cd ..'
alias l='ls -l'
alias ll='ls -la'
alias lll='ls -lha'

#!/bin/bash

#######################################
# Run ember exam against a set of files
# Flags:
# -c: (default) run test files from git unstaged changes, i.e., test files you seen in 'git status'
# -d: run test files in from git head
# -h: help
# -s: append the `--server` flag
# files[,files]: run supplied test files
#######################################
emberTests() {
  gitHead_flag=''
  gitChanges_flag=''
  help_flag=''
  listOfTestFiles=''
  finalTestFiles=''
  filter=''
  server_flag=''

while getopts f:cdhs opt; do
	case $opt in
	f) filter=$OPTARG ;;
	c) gitChanges_flag=1 ;;
	d) gitHead_flag=1 ;;
	h) help_flag=1 ;;
	s) server_flag="--server" ;;
	'?')
    # looks like a param was passed that was not caught here
		echo >&2 "Invalid option: ${@:$OPTIND:1}"
    echo "Unrecognized parameter. Trying running the command with the help (-h) flag"
		return 1
	;;
	esac
	shift $OPTIND-1
done
[[ $1 = -- ]] && shift

# setup colors for some nice echoing
RED=`tput setaf 1`
GREEN=`tput setaf 2`
RESET=`tput sgr0`

  # determine which (if any) test files we're going to run
  if [[ $OPTIND -eq 1 && $# -eq 0 ]] ; then
    # default to '-c' param if no arguments passed in
    echo -e "${RED}defaulting to 'emberTests -c' since no arguments found${RESET}"
    emberTests -c
    return 1
  elif [[ "$gitChanges_flag" == 1 ]]; then
    echo "Testing files in git status:"
    listOfTestFiles=$(git status --porcelain | sed s/^...// | grep test)
  elif [[ "$gitHead_flag" == 1 ]]; then
    echo "Testing files in git HEAD:"
    listOfTestFiles=$(git diff HEAD^ HEAD --name-only -- '*test*')
  elif [[ "$help_flag" == 1 ]]; then
    echo -e "emberTests is a helper for plugging a set of test files into 'ember exam --path dist --file-path'\n"
    echo "Usage:"
    echo "${GREEN}[file, ...]${RESET} - list specific files"
    echo "${GREEN}-c (default)${RESET}:  run test files from git unstaged changes (see 'git status')"
    echo "${GREEN}-d${RESET}: run test files from files in git head"
    echo "${GREEN}-f${RESET}: filter applied to limit tests inside supplied files"
    echo "${GREEN}-s${RESET}: append the '--server' flag"
    return 1
  else
    echo "Assuming you\'ve passed in a file/files"
    echo "Passing the following to ember exam:"
    listOfTestFiles=$1
  fi

  echo -e "${GREEN}${listOfTestFiles}${RESET}"
  finalTestFiles=$(echo "$listOfTestFiles" | tr '\n' ',' | sed 's/.$//' | xargs echo)
  # exit early since there are no files to test and we'll wait forever if this gets passed to ember exam
  if [[ -z "$finalTestFiles" ]]; then
  fi

  # run the tests
  if [[ -z $filter ]]; then
    ember exam --path dist --file-path ${finalTestFiles} ${server_flag}
  else
    echo ""
    echo "Filtering for: ${GREEN}${filter}${RESET}"
    echo ""
    ember exam --path dist --file-path ${finalTestFiles} --filter ${filter} ${server_flag}
  fi
}

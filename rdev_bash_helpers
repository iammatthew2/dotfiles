#!/usr/bin/env bash

#######################################
# Wrapper method for `rdev` to cache names of rdev instances
# Arguments:
#   same as native `rdev` commands
#######################################
xdev() {
  if [[ "$1" == "create" ]]; then
    echo "This will create a new rdev instance"
    echo "........................."
    echo ""
    if [[ -z $2 ]];then
      echo "no product supplied. Using cache from ~/.rdevLastCreateCache"
      product=$(<~/.rdevLastCreateCache)
    else
      echo "$2" > ~/.rdevLastCreateCache
      product=$2
    fi
    echo "creating rdev instance for product ${product}"
     rdev create ${product} > ~/.rdevLatestCreateResponse
    echo "created:"
    cat ~/.rdevLatestCreateResponse
    echo "........................."
     xdev refresh
    # TODO: update this to handle flags
    if [[ true ]]; then
      echo "The <connect> flag was passed"
      echo "so this script will now call connect() with the new instance name"
      echo "which will open VS Code and a new ssh connection to that instance"
      connect $(cat ~/.rdevLatestCreateResponse | grep RUNNING | awk '{print $1}') 
    fi
    # untested
    #if [[ true ]]; then 
      #echo "running pembery-secure"
      # yarn pemberly-secure trust voyager-web/$(product | grep RUNNING | awk 'print $1') --use-localhost-for-remote --allow-unsafe-host
    #fi
  elif [[ "$1" == "delete" ]]; then
    echo "rdev delete wrapper"
    rdev delete $2
    xdev refresh
  elif [[ "$1" == "refresh" ]]; then
    confirmRdevCache
    rdev ls > ~/.rdevLsCache
    echo "New cache is set as:"
    cat ~/.rdevLsCache
  elif [[ "$1" == "ls" ]]; then
    confirmRdevCache
    echo "Dislaying cached rdev instances:"
    cat ~/.rdevLsCache
  else
    rdev $@
  fi
}

#######################################
# Filter rdev results and call connect()
# Arguments:
# (optional) flag: (passed down to connect()) "-c" or "-s" - only open either VS Code or a basic ssh session, respectively
#######################################
fconnect() {
  if ! command -v fzf &> /dev/null;  then
    echo "fzf could not be found. Maybe it's not installed?"
  elif [[ "-h" == $1 ]]; then
    echo "fconnect filters rdev results and call connect()"
    echo
    echo "Optional params:"
    echo "-h help"
    echo "-s establish a basic ssh session"
    echo "-rs establish an rdev ssh session"
    echo "-c  establish an rdev VS Code session"
  else
    confirmRdevCache
    # call connect() and pass it the result we select from the fzf selection menu along with any flags set
    connect $(cat ~/.rdevLsCache | grep RUNNING | awk '{print $1}' | fzf --height 25%) ${1}
  fi
}

#######################################
# Connect to an rdev host with vscode then ssh into the host
# Arguments:
#   host: name of rdev host to connect to
#   (optional) flag: "-c" or "-s" - only open either VS Code or a basic ssh session, respectively
#######################################
connect() {
  if [[ -z $1 ]]; then
    echo "name of host must be given as the one and only argument to this function"
  elif [[ "-c" == $2 ]]; then
    echo "Connecting to host: $1"
    echo "starting VS Code..."
    rdev code $1
  elif [[ "-s" == $2 ]]; then
    echo "starting ssh session and CD'ing to the ${1%%/*} dir..."
    ssh -t $1 "cd ${1%%/*}; bash -l"
  elif [[ "-rs" ==  $2 ]]; then
    echo "starting an RDEV ssh session"
    rdev ssh $1
  else
    echo "Connecting to host: $1"
    echo "starting VS Code..."
    rdev code $1
    echo "starting ssh session and CD'ing to the ${1%%/*} dir..."
    ssh -t $1 "cd ${1%%/*}; bash -l"
  fi
}

#######################################
# Check if rdev cache file exists and create one if it does not
# Arguments:
#   none
#######################################
confirmRdevCache() {
  FILE=~/.rdevLsCache
  if [[ ! -f "$FILE" ]]; then
    echo "$FILE does not exist. Creating and populating it now..."
    rdev ls > ~/.rdevLsCache
  fi
}

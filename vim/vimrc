source $HOME/.vim/config/coc.vimrc 

hi link CocFloating markdown

filetype plugin indent on
syntax on
set visualbell
set number relativenumber
set ruler
set encoding=utf-8
set textwidth=79
set nowrap
set formatoptions-=t
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set noshiftround
set backspace=indent,eol,start
set incsearch
set ignorecase
set smartcase
set hlsearch
set directory=~/.vim/vimswap
hi Search cterm=NONE ctermfg=grey ctermbg=blue

" Style status line to indicate active pane
hi StatusLine   ctermfg=15  guifg=#ffffff ctermbg=239 guibg=#4e4e4e cterm=bold gui=bold
hi StatusLineNC ctermfg=249 guifg=#b2b2b2 ctermbg=237 guibg=#3a3a3a cterm=none gui=none

" Underline current row for active pane
augroup BgHighlight
    autocmd!
    autocmd WinEnter * set cul
    autocmd WinLeave * set nocul
augroup END

" Key-mappings:
" ***************************************************
" Edit this config:
nmap <leader>ev :vsp $MYVIMRC<CR>
" Edit the COC config:
nmap <leader>ec :vsp $HOME/.vim/config/coc.vimrc<CR>
" Toggle NERDTree at current file:
nmap <leader>tf :NERDTreeFind<CR>
" Toggle NERDTree:
nmap <leader>tt :NERDTreeToggle<CR>
" Toggle line numbering styles: regular, relative, relative plus, none
nmap <leader>l :exec &nu==&rnu? "se nu!" : "se rnu!"<CR>
" Go to previous file edited in buffer:
nmap <leader>b :b#<CR>
" Clear search highlighting:
nnoremap <silent> <leader>\ :nohlsearch <cr>
" Toggle quickfix window:
nnoremap <leader>q :call QuickfixToggle()<cr>
" Quicklist navigation
map <C-j> :cn<CR>
map <C-k> :cp<CR>
" FZF: file find
nnoremap <silent> <C-p> :Files<CR> 
" FZF: ripgrep -> FZF phrase find
nnoremap <silent> <leader>f :Rg<CR>
" FZF: git commit search
nnoremap <silent> <leader>g :Commits<CR>
" FZF: git diff log HEAD -n <count> --name-only
nnoremap <silent> <leader>h :HFiles

" ***************************************************
" Notes on how to do common actions
" ***************************************************

" NERDTree commands:
" t: Open the selected file in a new tab
" i: Open the selected file in a horizontal split window
" s: Open the selected file in a vertical split window
" I: Toggle hidden files
" m: Show the NERD Tree menu
" R: Refresh the tree, useful if files change outside of Vim
" ?: Toggle NERD Tree's quick help
"
" How to tab:
" ***************************************************
" next tab: gt
" prior tab: gT
" numbered tab: nnngt
"
" More:
" ***************************************************
" ctrl - ww: navigate across split views (NerdTree is considered one of those views)
" :b fileName  - open file from buffer
" :b# - go to previous open file
" ctrl-z - suspend vim (access the suspended job with 'fg', view jobs with 'jobs' )

" ***************************************************
" Helper methods and other configs beyond simple `set`s
" ***************************************************

" NERDTree settings:
" Exit Vim if NERDTree is the only window left.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
    \ quit | endif

" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

" Start NERDTree and put the cursor back in the other window.
autocmd VimEnter * NERDTree | wincmd p

" Quicklist toggle helper 
let g:quickfix_is_open = 0
function! QuickfixToggle()
    if g:quickfix_is_open
        cclose
        let g:quickfix_is_open = 0
        execute g:quickfix_return_to_window . "wincmd w"
    else
        let g:quickfix_return_to_window = winnr()
        copen
        let g:quickfix_is_open = 1
    endif
endfunction


" FZF configs
" ***************************************************
" https://github.com/junegunn/fzf.vim
" https://dev.to/iggredible/how-to-search-faster-in-vim-with-fzf-vim-36ko
packadd! fzf
packadd! fzf.vim
set rtp+=/usr/local/opt/fzf
" config FZF to exclude file names from file name from the phrase match search (ripgrep)
command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1, {'options': '--delimiter : --nth 4..'}, <bang>0)
" Find files in git commits
command! -count=1 HFiles call fzf#run(fzf#wrap(fzf#vim#with_preview({ 'source': 'git log HEAD -n <count> --diff-filter=MA --name-only --pretty=format: | sed -e /^$/d', 'window': {'width': 0.9, 'height': 0.6}})))

" source files from rg results
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files'
endif
